import 'dart:ui';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:hexcolor/hexcolor.dart';

import '../utils/pref_utils.dart';

/// Helper class for managing themes and colors.
class ThemeHelper {
  // The current app theme
  final _appTheme = PrefUtils().getThemeData();


  final appColor =  Color(0xFF142272);  // Colors.orange;
// A map of custom color themes supported by the app
  final Map<String, PrimaryColors> _supportedCustomColor = {
    'primary': PrimaryColors()
  };

// A map of color schemes supported by the app
  final Map<String, ColorScheme> _supportedColorScheme = {
    'primary': ColorSchemes.primaryColorScheme
  };

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    PrefUtils().setThemeData(_newTheme);
    Get.forceAppUpdate();
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme =
        _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: colorScheme.onPrimaryContainer,
      elevatedButtonTheme: ElevatedButtonThemeData(
        style: ElevatedButton.styleFrom(
          backgroundColor: colorScheme.primary,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(2),
          ),
          visualDensity: const VisualDensity(
            vertical: -4,
            horizontal: -4,
          ),
          padding: EdgeInsets.zero,
        ),
      ),
      dividerTheme: DividerThemeData(
        thickness: 1,
        space: 1,
        color: colorScheme.onError.withOpacity(0.48),
      ),
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 16,
          fontFamily: 'Euclid Circular A',
          fontWeight: FontWeight.w400,
        ),
        bodyMedium: TextStyle(
          color: appTheme.blueGray90001,
          fontSize: 14,
          fontFamily: 'Euclid Circular A',
          fontWeight: FontWeight.w400,
        ),
        bodySmall: TextStyle(
          color: appTheme.gray80005,
          fontSize: 12,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w400,
        ),
        headlineSmall: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 25,
          fontFamily: 'Sora',
          fontWeight: FontWeight.w600,
        ),
        labelLarge: const TextStyle(
          color: Color(0XFF383838),
          fontSize: 12,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelMedium: const TextStyle(
          color: Color(0XFF464646),
          fontSize: 10,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        labelSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 8,
          fontFamily: 'Euclid Circular A',
          fontWeight: FontWeight.w500,
        ),
        titleLarge: TextStyle(
          color: colorScheme.onPrimaryContainer,
          fontSize: 20,
          fontFamily: 'Sora',
          fontWeight: FontWeight.w600,
        ),
        titleMedium: TextStyle(
          color: colorScheme.onErrorContainer,
          fontSize: 18,
          fontFamily: 'Poppins',
          fontWeight: FontWeight.w500,
        ),
        titleSmall: TextStyle(
          color: appTheme.black900,
          fontSize: 14,
          fontFamily: 'Euclid Circular A',
          fontWeight: FontWeight.w500,
        ),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static const primaryColorScheme = ColorScheme.light(
    // Primary colors
    primary: Color(0xFF142272),
    primaryContainer: Color(0XFF323232),

    // Error colors
    errorContainer: Color(0XFF6C6C6C),
    onError: Color(0XFFA6A6A6),
    onErrorContainer: Color(0XFF121212),

    // On colors(text colors)
    onPrimary: Color(0XFF1C1B1F),
    onPrimaryContainer: Color(0XFFFFFFFF),
  );
}

/// Class containing custom colors for a primary theme.
class PrimaryColors {
  // Amber
  Color get amber200 => Color(0XFFFAE28E);

  // Black
  Color get black900 => Color(0XFF000000);


  // Blue
  Color get blue100 => Color(0XFFB8DCFF);
  Color get blue10001 => Color(0XFFB7DCFF);
  Color get blue200 => Color(0XFF8FC8FF);
  Color get blue300 => Color(0XFF5DADEC);

  // BlueB
  Color get blue200B2 => Color(0XB290C9FF);

  // BlueC
  Color get blue500C1 => Color(0XC120A7E7);

  // BlueGray
  Color get blueGray100 => Color(0XFFCFCFCF);
  Color get blueGray700 => Color(0XFF525252);
  Color get blueGray900 => Color(0XFF303030);
  Color get blueGray90001 => Color(0XFF2C2C2C);

  // BlueGrayB
  Color get blueGray900B7 => Color(0XB7082E40);

  // Cyan
  Color get cyan900 => Color(0XFF0C5375);

  // Gray
  Color get gray100 => Color(0XFFF4F4F4);
  Color get gray200 => Color(0XFFEBEBEB);
  Color get gray300 => Color(0XFFDFDFDF);
  Color get gray400 => Color(0XFFC1BDBD);
  Color get gray40001 => Color(0XFFC2C2C2);
  Color get gray40002 => Color(0XFFC2C2C6);
  Color get gray50 => Color(0XFFF8F8F8);
  Color get gray500 => Color(0XFF909090);
  Color get gray50001 => Color(0XFF9E9E9E);
  Color get gray50002 => Color(0XFF979797);
  Color get gray50003 => Color(0XFF929292);
  Color get gray600 => Color(0XFF727272);
  Color get gray60001 => Color(0XFF757575);
  Color get gray60002 => Color(0XFF707070);
  Color get gray60003 => HexColor("#EDF1F3");
  Color get gray60004 => Color(0XFF838383);
  Color get gray700 => Color(0XFF575757);
  Color get gray800 => Color(0XFF4F4F4F);
  Color get gray80001 => Color(0XFF464646);
  Color get gray80002 => Color(0XFF434343);
  Color get gray80003 => Color(0XFF4B4B4B);
  Color get gray80004 => Color(0XFF3F3F3F);
  Color get gray80005 => Color(0XFF383838);
  Color get gray900 => Color(0XFF141414);
  Color get gray90001 => Color(0XFF14171E);
  Color get darkGrey => Color(0xFF6C7278);

  // GrayD
  Color get gray300D3 => Color(0XD3E4E4E4);

  // Green
  Color get greenA200 => Color(0XFF59FFAF);

  // Indigo
  Color get indigo90026 => Color(0X26252C61);

  // LightBlueB
  Color get lightBlue50B2 => Color(0XB2D0E8FF);

  // LightBlue
  Color get lightBlue600 => Color(0XFF0094DA);
  Color get lightBlue900 => Color(0XFF096590);
  Color get lightBlue90001 => Color(0XFF086490);

  // LightBlueAd
  Color get lightBlue600Ad => Color(0XAD049FE9);

  // LightBlueD
  Color get lightBlue600D1 => Color(0XD10198D5);

  // Pink
  Color get pink100 => Color(0XFFFFB6E6);
  Color get pink500 => Color(0XFFEE018B);
  Color get pink50060 => Color(0X60ED008E);

  // Purple
  Color get purple100 => Color(0XFFDBAEFF);

  Color get darkGreyBlue => Color(0xFF415792);


 Color get lightBgColor => Color(0xFFF4F5FD);


}

PrimaryColors get appTheme => ThemeHelper().themeColor();
ThemeData get theme => ThemeHelper().themeData();
